package day2;

public class ObjectOriented {

    // 실제로 존재하거나 개념적으로 묶을수 있는 사물을 객체로 보고
    // 그 객체들의 상태(속성)와 행동(메서드)을 정의해 서로 협력하게 함으로써 소프트웨어를 구성하는 방식
    // 객체지향은 현실 세계의 사물(객체)을 프로그램 속으로 모델링하여,
    // 속성과 행동을 하나로 묶고, 객체 간 협력을 통해 기능을 구현하는 방식이다.

    // 객체지향의 특징
    // 1. 캡슐화(Encapsulation)
    // 데이터(필드)와 메서드를 하나의 객체안에 묶는것을 의미한다
    // 외부에서 객체의 내부 구현이나(필드나 메서드의 구체적 로직)에 함부로 접근 못하도록 보호(접근 제어)한다
    // 코드 유지보수와 보안성, 모듈화에 도움이 된다

    // 2. 추상화(Abstraction)
    // 복잡한 시스템에서 필요한 핵심(본질)만 추려내고 불필요한 부분들은 감추는 것
    // 예시를 들어서 차 객체를 정의할때 실제 내부 엔진 구조가 아닌 운행에 필요한 핵심 동작(시동걸기 악셀밟기 브레이크 밟기 등)만 추상화 한다
    // 이런 방식을 통해 복잡도를 낮추고, 객체의 설계를 단순/명확하게 만들 수 있음

    // 3. 상속(Inheritance)
    // 상위(부모) 클래스의 속성과 메서드를 하위(자식) 클래스가 물려받아 확장하거나 재정의(오버라이딩)할 수 있는 기능
    // 코드 재사용성 증가, 계층적 구조로 인해 관리가 용이해진다
    // "is-a" 관계 고양이는 동물의 한 종류이다

    // 4. 다형성(Polymorphism)
    // 같은 이름이 메서드가 클래스(혹은 객체)에 따라 서로 다른 동작을 수행할 수 있다
    // 대표적인 예시로 오버로딩(매서드 이름은 같지만 매개변수 형태 혹은 갯수를 다르게하여 여러 매서드를 정의할 수 있음)
    // 오버라이딩(상속 구조에서 부모 메서드를 재정의 할수 있음 equals())
    // 다형성을 통해 확장성과 유연한 설계가 가능하다

    // 객체의 개념
    // 객체는 속성(필드,상태)과 행동(메서드,기능)을 가지고 있는 실체다

}

