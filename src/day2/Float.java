package day2;

public class Float {


    public static void main(String[] args){

        System.out.println(0.1 + 0.2);
        // 결과는 0.30000000000000004

        // 이유는 “2진 부동소수점 표현 방식의 정밀도 한계” 때문이다
        // 자바의 double은 IEEE 754 표준을 사용하고,
        // 이때 10진수의 0.1, 0.2, 0.3 같은 값을 정확히 2진수로 표현하지 못함
        // 자바에서 double 타입은 64비트 2진 부동소수점(IEEE 754)을 사용합니다.
        //
        // 십진수 0.1(= 1/10)을 2진수로 바꾸면,
        // 0.0001100110011…무한반복 처럼 끝없이 반복되는 형태가 된다.
        // 컴퓨터가 이 무한 소수를 유한 비트로 잘라서 저장하므로, 실제 메모리에 저장될 때는 약간의 오차가 생긴다.
        // 비슷하게 0.2, 0.3도 이진 표현 시 무한 반복 형태이므로,
        // 메모리에는 (double은 64비트(IEEE 754 double-precision)로 제한되므로) 무한 반복을 일정 자리에서 잘라 가장 근사한 수로 저장근삿값이 들어간다
        // 결론 -> 10진 소수들이 2진법으로 표현했을때 정확한 값이 표현이 안되서 생긴 문제

        // 자바 double 타입은 64비트 이진 부동소수점 포맷(IEEE 754)방식으로 사용
        // 1비트 부호(sign)
        // 11비트 지수(exponent)
        // 52비트 가수(mantissa)
        // 이때 10진 소수를 2진수 mantissa로 표현하려할떄 "딱 떨어지지않는 경우" 가 많다

        // 정밀도 있는 소수를 계산해야하는 상황이라면
        // BigDecimal 사용을 추천
        // 10진 기준으로 정확한 연산을 지원(단, 속도가 느리고,부동소수점보다 사용이 복잡 )

    }

}
